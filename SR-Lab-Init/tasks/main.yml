---
- block:
    - name: Copy SR image from home directory to /var/lib/libvirt/images
      copy:
        src: sros-vm.qcow2
        dest: /var/lib/libvirt/images/{{ vm_name }}.qcow2
      tags: [ 'travis_never' ]

    - name: Create Files Folder
      file:
        path: /home/{{ remote_user }}/files/{{ vm_name }}
        state: directory

    - name: Copy license from home directory to /home/{{ remote_user }}/files/{{ vm_name }}/license.txt
      copy:
        src: SR_OS_VSR-SIM_license.txt
        dest: /home/{{ remote_user }}/files/{{ vm_name }}/license.txt
      tags: [ 'travis_never' ]

    - name: Defining Networking
      template: src=bridge.conf.j2 dest=/etc/sysconfig/network-scripts/ifcfg-{{ item.key }}-BR mode=0644
      run_once: true
      with_dict: "{{ netwk }}"

    - name: Bring-Up SR-Lab Bridge Ports
      command: ifup ifcfg-{{ item.key }}-BR
      run_once: true
      with_dict: "{{ netwk }}"

    - name: Copy BoF to ~/
      template: src=bof.cfg.j2 dest=/home/{{ remote_user }}/files/{{ vm_name }}/bof.cfg

    - name: Create SR Config Files
      template: src=config.cfg.j2 dest=/home/{{ remote_user }}/files/{{ vm_name }}/config.cfg

    - name: Generate XML Files for SR Devices
      virt:
        name: "{{ vmname }}"
        command: define
        xml: "{{ lookup('template', 'vm_template.xml.j2') }}"

    - name: Copying temporary configuration files into vSIM image
      command: guestfish --rw -a /var/lib/libvirt/images/{{ vm_name }}.qcow2 -m /dev/sda1 copy-in /home/{{ remote_user }}/files/{{ vm_name }}/{{ item }} /
      with_items:
        - bof.cfg
        - license.txt
        - config.cfg

    - name: UUID Validation
      replace:
        path: /etc/libvirt/qemu/{{vmname}}.xml
        after: "<name>.*</name>"
        regexp: "<uuid>.*</uuid>"
        replace: '<uuid>{{ uuid_all }}</uuid>'

    - name: Starting SR VMs
      virt:
        name: "{{ vm_name }}"
        state: running

  delegate_to: "{{ target_server }}"
  remote_user: "{{ remote_user }}"
